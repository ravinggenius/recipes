// Generated by CoffeeScript 1.3.1
var Page, Router, mapRoute, router, serverMock;

Router = require('express/lib/router');

mapRoute = (router = module.exports = require('./router')).mapRoute;

router.addHttpMethods = function(appExports, view, createModel) {
  var pageParams, routes;
  routes = [];
  ['get', 'post', 'put', 'del'].forEach(function(method) {
    return appExports[method] = function(pattern, callback) {
      routes.push([method, pattern, callback]);
      return appExports;
    };
  });
  pageParams = function(req) {
    var k, params, v, _ref;
    params = {
      url: req.url,
      body: req.body,
      query: req.query
    };
    _ref = req.params;
    for (k in _ref) {
      v = _ref[k];
      params[k] = v;
    }
    return params;
  };
  appExports.router = function() {
    var expressRouter, middleware;
    expressRouter = new Router(serverMock);
    middleware = function(req, res, next) {
      var previousModel;
      if (!(previousModel = req.model)) {
        req.model = createModel();
      }
      return expressRouter._dispatch(req, res, function(err) {
        req.model = previousModel;
        return next(err);
      });
    };
    routes.forEach(function(_arg) {
      var callback, from, method, pattern, to;
      method = _arg[0], pattern = _arg[1], callback = _arg[2];
      if (typeof pattern === 'object') {
        from = pattern.from, to = pattern.to;
        callback = pattern.forward || callback.forward || callback;
        expressRouter._route(method, to, function(req, res, next) {
          var model, page, params, previousPage, render;
          model = req.model;
          page = new Page(view, res, model);
          params = pageParams(req);
          render = page.render;
          page.render = function(ns, ctx, status) {
            callback(model, params, next);
            page.render = render;
            return page.render(ns, ctx, status);
          };
          req.url = mapRoute(from, params);
          previousPage = req._derbyPage;
          req._derbyPage = page;
          middleware(req, res, next);
          if (previousPage) {
            return req._derbyPage = page;
          } else {
            return delete req._derbyPage;
          }
        });
        return;
      }
      return expressRouter._route(method, pattern, function(req, res, next) {
        var model, page, params;
        model = req.model;
        page = req._derbyPage || new Page(view, res, model);
        params = pageParams(req);
        return callback(page, model, params, next);
      });
    });
    return middleware;
  };
  return routes;
};

Page = router.Page = function(view, res, model) {
  this.view = view;
  this.res = res;
  this.model = model;
};

Page.prototype = {
  render: function(ns, ctx, status) {
    return this.view.render(this.res, this.model, ns, ctx, status);
  },
  redirect: function(url, status) {
    return this.res.redirect(url, status);
  }
};

serverMock = {
  enabled: function() {
    return false;
  }
};
