// Generated by CoffeeScript 1.3.1
var EventDispatcher, Model, Promise, View, cssError, empty, emptyDom, emptyEventDispatcher, emptyModel, emptyPathMap, emptyRes, errorHtml, escapeHtml, escapeInlineScript, files, isProduction, loadTemplatesScript, templateError, trim, uglify, _ref;

uglify = require('racer/node_modules/uglify-js');

Model = require('racer').Model;

Promise = require('racer/lib/Promise');

isProduction = require('racer/lib/util').isProduction;

EventDispatcher = require('./EventDispatcher');

files = require('./files');

escapeHtml = require('./html').escapeHtml;

_ref = require('./refresh.server'), errorHtml = _ref.errorHtml, cssError = _ref.cssError, templateError = _ref.templateError;

trim = (module.exports = View = require('./View')).trim;

empty = function() {};

emptyRes = {
  getHeader: empty,
  setHeader: empty,
  write: empty,
  end: empty
};

emptyPathMap = {
  id: empty
};

emptyModel = {
  get: empty,
  bundle: empty,
  __pathMap: emptyPathMap
};

emptyEventDispatcher = {
  bind: empty
};

emptyDom = {
  bind: empty
};

escapeInlineScript = function(s) {
  return s.replace(/<\//g, '<\\/');
};

View.prototype.inline = function(fn) {
  return this._inline += uglify("(" + fn + ")()") + ';';
};

loadTemplatesScript = function(requirePath, templates, instances) {
  return "(function() {\n  require('" + requirePath + "').view._makeAll(\n    " + (JSON.stringify(templates, null, 2)) + ", " + (JSON.stringify(instances, null, 2)) + "\n  );\n})();";
};

View.prototype._load = function(isStatic, callback) {
  var appFilename, clientName, count, errors, finish, instances, js, options, promise, require, root, templates, _ref1,
    _this = this;
  if (isProduction) {
    this._watch = false;
    this._load = function(isStatic, callback) {
      return callback();
    };
  } else {
    this._watch = true;
  }
  if (promise = this._loadPromise) {
    return promise.on(callback);
  }
  promise = this._loadPromise = (new Promise).on(callback);
  promise.on(function() {
    return delete _this._loadPromise;
  });
  templates = instances = js = null;
  errors = {};
  if (isStatic) {
    root = this._root;
    clientName = this._clientName;
    count = 2;
    finish = function() {
      if (--count) {
        return;
      }
      return promise.resolve();
    };
  } else {
    appFilename = this._appFilename;
    options = this._derbyOptions || {};
    _ref1 = files.parseName(appFilename, options), root = _ref1.root, clientName = _ref1.clientName, require = _ref1.require;
    this._root = root;
    if (!(this._clientName = clientName)) {
      promise.resolve();
    }
    this._require = require;
    count = 3;
    finish = function() {
      var loadTemplates;
      if (--count) {
        return;
      }
      loadTemplates = loadTemplatesScript(require, templates, instances);
      if (isProduction) {
        loadTemplates = uglify(loadTemplates);
      }
      js += ';' + loadTemplates;
      _this._errors = errorHtml(errors) || '';
      return files.writeJs(root, js, options, function(err, jsFile, appHash) {
        if (err) {
          throw err;
        }
        _this._jsFile = jsFile;
        _this._appHash = appHash;
        return promise.resolve();
      });
    };
    if (this._js) {
      js = this._js;
      finish();
    } else {
      files.js(appFilename, function(err, value, inline) {
        if (err) {
          throw err;
        }
        js = value;
        if (!isProduction) {
          _this._js = value;
        }
        if (inline) {
          _this.inline("function(){" + inline + "}");
        }
        return finish();
      });
    }
  }
  files.css(root, clientName, isProduction, function(err, value) {
    if (err) {
      _this._css = '<style id=$_css></style>';
      errors['CSS'] = cssError(err);
      return finish();
    }
    value = isProduction ? trim(value) : '\n' + value;
    _this._css = value ? "<style id=$_css>" + value + "</style>" : '';
    return finish();
  });
  return files.templates(root, clientName, function(err, _templates, _instances) {
    if (err) {
      templates = {};
      instances = {};
      errors['Template'] = templateError(err);
    } else {
      templates = _templates;
      instances = _instances;
    }
    _this._makeAll(templates, instances);
    return finish();
  });
};

View.prototype.render = function(res) {
  var arg, ctx, i, isStatic, model, ns, _i,
    _this = this;
  if (res == null) {
    res = emptyRes;
  }
  for (i = _i = 1; _i <= 5; i = ++_i) {
    arg = arguments[i];
    if (arg instanceof Model) {
      model = arg;
    } else if (typeof arg === 'object') {
      ctx = arg;
    } else if (typeof arg === 'string') {
      ns = arg;
    } else if (typeof arg === 'number') {
      res.statusCode = arg;
    } else if (typeof arg === 'boolean') {
      isStatic = arg;
    }
  }
  if (model == null) {
    model = emptyModel;
  }
  return this._load(isStatic, function() {
    if (isStatic) {
      return _this._render(res, model, ns, ctx, isStatic);
    }
    return model.bundle(function(bundle) {
      return _this._render(res, model, ns, ctx, isStatic, bundle);
    });
  });
};

View.prototype._init = function(model) {
  this.dom = emptyDom;
  model.__events = emptyEventDispatcher;
  model.__blockPaths = {};
  model.__pathMap = emptyPathMap;
  this.model = model;
  return this._idCount = 0;
};

View.prototype._render = function(res, model, ns, ctx, isStatic, bundle) {
  var charset, clientName, doctype, errText, head, header, root, scripts, tail, title;
  this._init(model);
  if (!res.getHeader('content-type')) {
    res.setHeader('Content-Type', 'text/html; charset=utf-8');
  }
  try {
    doctype = this.get('doctype', ns, ctx);
    root = this.get('root', ns, ctx);
    charset = this.get('charset', ns, ctx);
    title = escapeHtml(this.get('title$s', ns, ctx));
    head = this.get('head', ns, ctx);
    header = this.get('header', ns, ctx);
    res.write("" + doctype + root + charset + "<title>" + title + "</title>" + head + this._css + header);
    res.write(this.get('body', ns, ctx) + this.get('footer', ns, ctx));
  } catch (err) {
    errText = templateError(err);
    this._errors || (this._errors = errorHtml({
      Template: errText
    }));
    res.write('<!DOCTYPE html><meta charset=utf-8><title></title>' + this._css);
  }
  clientName = this._clientName;
  scripts = "<script>";
  if (!isStatic) {
    scripts += "function " + clientName + "(){" + clientName + "=1}";
  }
  scripts += escapeInlineScript(this._inline) + "</script>" + this.get('scripts', ns, ctx);
  if (!isStatic) {
    scripts += "<script defer async onload=" + clientName + "() src=" + this._jsFile + "></script>";
  }
  res.write(scripts);
  tail = this.get('tail', ns, ctx);
  if (isStatic) {
    return res.end(tail);
  }
  return res.end("<script>(function(){function f(){setTimeout(function(){" + ("" + clientName + "=require('" + this._require + "')(") + escapeInlineScript(bundle) + ",'" + this._appHash + "'," + (+this._watch) + ",'" + (ns || '') + "'" + (ctx ? ',' + escapeInlineScript(JSON.stringify(ctx)) : '') + (")},0)}" + clientName + "===1?f():" + clientName + "=f})()</script>" + tail + this._errors));
};
