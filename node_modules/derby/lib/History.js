// Generated by CoffeeScript 1.3.1
var History, currentPath, doc, parseUrl, qs, renderRoute, resolveUrl, routePath, win, winHistory, winLocation, _ref;

qs = require('qs');

_ref = require('url'), parseUrl = _ref.parse, resolveUrl = _ref.resolve;

renderRoute = require('./router').render;

win = window;

winHistory = win.history;

winLocation = win.location;

doc = win.document;

currentPath = winLocation.pathname;

if (winHistory.replaceState) {
  winHistory.replaceState({
    $render: true,
    $method: 'get'
  }, null, winLocation.href);
}

History = module.exports = function(page, routes, dom) {
  var addListener,
    _this = this;
  this._page = page;
  this._routes = routes;
  addListener = dom.addListener;
  if (winHistory.pushState) {
    addListener(doc, 'click', function(e) {
      var i, url;
      if (e.target.href && !e.metaKey && e.which === 1) {
        url = e.target.href;
        if (~(i = url.indexOf('#')) && url.slice(0, i) === winLocation.href.replace(/#.*/, '')) {
          return;
        }
        _this.push(url, true, null, e);
      }
    });
    addListener(doc, 'submit', function(e) {
      var form, url;
      if (e.target.tagName.toLowerCase() === 'form') {
        form = e.target;
        if (!(url = form.action) || form._forceSubmit || form.enctype === 'multipart/form-data') {
          return;
        }
        _this.push(url, true, null, e);
      }
    });
    addListener(win, 'popstate', function(e) {
      var el, i, id, previous, state, url;
      previous = currentPath;
      currentPath = winLocation.pathname;
      if (state = e.state) {
        if (!state.$render) {
          return;
        }
        return renderRoute(page, routes, previous, currentPath, state.$method);
      }
      url = winLocation.href;
      if (~(i = url.indexOf('#')) && currentPath !== previous) {
        renderRoute(page, routes, previous, currentPath, 'get');
        id = url.slice(i + 1);
        if (el = doc.getElementById(id) || doc.getElementsByName(id)[0]) {
          el.scrollIntoView();
        }
      }
    });
  } else {
    this.push = this.replace = function() {};
  }
};

History.prototype = {
  push: function(url, render, state, e) {
    return this._update('pushState', url, render, state, e);
  },
  replace: function(url, render, state, e) {
    return this._update('replaceState', url, render, state, e);
  },
  refresh: function() {
    var path;
    path = routePath(winLocation.href);
    return renderRoute(this._page, this._routes, null, path, 'get');
  },
  back: function() {
    return winHistory.back();
  },
  forward: function() {
    return winHistory.forward();
  },
  go: function(i) {
    return winHistory.go(i);
  },
  _update: function(historyMethod, relativeUrl, render, state, e) {
    var body, el, form, method, name, override, path, previous, query, url, _i, _len, _ref1;
    if (render == null) {
      render = true;
    }
    if (state == null) {
      state = {};
    }
    url = resolveUrl(winLocation.href, relativeUrl);
    if (!(path = routePath(url))) {
      return;
    }
    if (e && e.type === 'submit') {
      form = e.target;
      query = [];
      _ref1 = form.elements;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        el = _ref1[_i];
        if (name = el.name) {
          query.push(encodeURIComponent(name) + '=' + encodeURIComponent(el.value));
          if (name === '_method') {
            override = el.value.toLowerCase();
            if (override === 'delete') {
              override = 'del';
            }
          }
        }
      }
      query = query.join('&');
      if (form.method.toLowerCase() === 'post') {
        method = override || 'post';
        body = qs.parse(query);
      } else {
        method = 'get';
        path += '?' + query;
      }
    } else {
      method = 'get';
    }
    previous = winLocation.pathname;
    state.$render = render;
    state.$method = method;
    winHistory[historyMethod](state, null, url);
    currentPath = winLocation.pathname;
    if (render) {
      return renderRoute(this._page, this._routes, previous, path, method, e, body, form);
    }
  }
};

routePath = function(url) {
  var match;
  return (match = parseUrl(url)) && match.protocol === winLocation.protocol && match.host === winLocation.host && match.pathname + (match.search || '');
};
