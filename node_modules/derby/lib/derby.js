// Generated by CoffeeScript 1.3.1
var Static, View, addHttpMethods, autoRefresh, derby, fs, http, isProduction, mergeAll, path, racer, up, _ref,
  __slice = [].slice;

fs = require('fs');

path = require('path');

http = require('http');

racer = require('racer');

up = require('up');

View = require('./View.server');

autoRefresh = require('./refresh.server').autoRefresh;

addHttpMethods = require('./router.server').addHttpMethods;

_ref = require('racer/lib/util'), mergeAll = _ref.mergeAll, isProduction = _ref.isProduction;

derby = module.exports = mergeAll(Object.create(racer), {
  options: {},
  configure: function(options) {
    this.options = options;
  },
  run: function(file, port, options) {
    var master, onMessage, server, upService;
    if (options == null) {
      options = {
        numWorkers: 1
      };
    }
    file = path.resolve(file);
    if (port == null) {
      port = isProduction ? 80 : 3000;
    }
    try {
      server = require(file);
    } catch (e) {
      console.error("Error requiring server module from `" + file + "`");
      throw e;
    }
    if (!(server instanceof http.Server)) {
      throw new Error("`" + file + "` does not export a valid `http.Server`");
    }
    if (!isProduction) {
      onMessage = up.Worker.prototype.onMessage;
      up.Worker.prototype.onMessage = function(message) {
        if (message.type === 'reload') {
          return upService.reload();
        }
        return onMessage.call(this, message);
      };
    }
    master = http.createServer().listen(port);
    upService = up(master, file, options);
    process.on('SIGUSR2', function() {
      console.log('SIGUSR2 signal detected - reloading');
      return upService.reload();
    });
    console.log("Starting cluster with %d workers in %s mode", options.numWorkers, process.env.NODE_ENV);
    console.log("`kill -s SIGUSR2 %s` to force cluster reload", process.pid);
    return console.log("Go to: http://localhost:%d/", port);
  },
  createApp: function(appModule) {
    var appExports, createModel, options, session, setStore, store, view;
    appExports = appModule.exports;
    appExports.view = view = new View;
    appExports.render = function(res, model, ns, ctx, status) {
      return view.render(res, model, ns, ctx, status);
    };
    appExports.ready = function() {};
    view._derbyOptions = options = this.options;
    view._appFilename = appModule.filename;
    store = null;
    session = null;
    createModel = function() {
      return store.createModel();
    };
    appExports._setStore = setStore = function(_store) {
      autoRefresh(_store, options, view);
      if (session != null) {
        session._setStore(_store);
      }
      return store = _store;
    };
    appExports.createStore = function(options) {
      return setStore(racer.createStore(options));
    };
    appExports.session = function() {
      return session = racer.session(store);
    };
    addHttpMethods(appExports, view, createModel);
    process.nextTick(function() {
      return view.render();
    });
    return appExports;
  },
  createStatic: function(root) {
    return new Static(root);
  },
  createStore: function() {
    var app, args, last, options, store, _i, _len;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    last = args[args.length - 1];
    if (!last.view) {
      options = args.pop();
    }
    store = racer.createStore(options);
    for (_i = 0, _len = args.length; _i < _len; _i++) {
      app = args[_i];
      app._setStore(store);
    }
    return store;
  },
  use: function(plugin, opts) {
    switch (plugin.decorate) {
      case 'racer':
        plugin(racer, opts);
        break;
      case 'derby':
        plugin(this, opts);
        break;
      default:
        throw new Error('plugin.decorate must be either "racer" or "derby"');
    }
    return this;
  }
});

Object.defineProperty(derby, 'version', {
  get: function() {
    return JSON.parse(fs.readFileSync(__dirname + '/../package.json', 'utf8')).version;
  }
});

Static = function(root) {
  this.root = root;
  this.views = {};
};

Static.prototype = {
  render: function(name, res, model, ns, ctx, status) {
    var view;
    if (!(view = this.views[name])) {
      view = this.views[name] = new View;
      view._root = this.root;
      view._clientName = name;
    }
    return view.render(res, model, ns, ctx, status, true);
  }
};
