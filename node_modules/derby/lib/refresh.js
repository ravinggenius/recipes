// Generated by CoffeeScript 1.3.1
var errorHtml, errors, updateError;

module.exports = {
  autoRefresh: function(view, model, appHash) {
    var socket;
    socket = model.socket;
    model.on('connectionStatus', function(connected, canConnect) {
      if (!canConnect) {
        return window.location.reload(true);
      }
    });
    socket.on('connect', function() {
      return socket.emit('derbyClient', appHash, function(reload) {
        if (reload) {
          return window.location.reload(true);
        }
      });
    });
    socket.on('refreshCss', function(err, css) {
      var el;
      el = document.getElementById('$_css');
      if (el) {
        el.innerHTML = css;
      }
      return updateError('CSS', err);
    });
    return socket.on('refreshHtml', function(err, templates, instances) {
      view.clear();
      view._makeAll(templates, instances);
      try {
        view.history.refresh();
      } catch (_err) {
        err || (err = _err);
      }
      return updateError('Template', err);
    });
  },
  errorHtml: errorHtml = function(errors) {
    var err, text, type;
    text = '';
    for (type in errors) {
      err = errors[type];
      text += '<h3>' + type + ' Error</h3><pre>' + err + '</pre>';
    }
    if (!text) {
      return;
    }
    return '<div id=$_derbyError style="position:absolute;background:rgba(0,0,0,.7);top:0;left:0;right:0;bottom:0;text-align:center">' + '<div style="background:#fff;padding:20px 40px;margin:60px;display:inline-block;text-align:left">' + text + '</div>' + '</div>';
  }
};

errors = {};

updateError = function(type, err) {
  var el, fragment, html, range;
  if (err) {
    errors[type] = err;
  } else {
    delete errors[type];
  }
  el = document.getElementById('$_derbyError');
  if (html = errorHtml(errors)) {
    if (el) {
      el.outerHTML = html;
    } else {
      range = document.createRange();
      range.selectNode(document.body);
      fragment = range.createContextualFragment(html);
      document.body.appendChild(fragment);
    }
    return;
  }
  if (el) {
    return el.parentNode.removeChild(el);
  }
};
