// Generated by CoffeeScript 1.3.1
var addWatches, cssError, files, isProduction, refresh, templateError;

isProduction = require('racer/lib/util').isProduction;

files = require('./files');

refresh = module.exports = require('./refresh');

refresh.cssError = cssError = function(err) {
  console.error('\nCSS PARSE ERROR\n' + err.stack);
  return err.stack;
};

refresh.templateError = templateError = function(err) {
  console.error('\nTEMPLATE ERROR\n' + err.stack);
  return err.stack;
};

refresh.autoRefresh = function(store, options, view) {
  var listeners;
  if (isProduction || store._derbySocketsSetup) {
    return;
  }
  store._derbySocketsSetup = true;
  listeners = {};
  return store.sockets.on('connection', function(socket) {
    return socket.on('derbyClient', function(appHash, callback) {
      var appFilename, reload, sockets;
      reload = appHash !== view._appHash;
      callback(reload);
      if (reload) {
        return;
      }
      appFilename = view._appFilename;
      if (listeners[appFilename]) {
        return listeners[appFilename].push(socket);
      }
      sockets = listeners[appFilename] = [socket];
      return addWatches(appFilename, options, sockets, view);
    });
  });
};

addWatches = function(appFilename, options, sockets, view) {
  var clientName, root, _ref;
  _ref = files.parseName(appFilename, options), root = _ref.root, clientName = _ref.clientName;
  files.watch(root, 'css', function() {
    return files.css(root, clientName, false, function(err, css) {
      var errText, socket, _i, _len, _results;
      if (err) {
        errText = cssError(err);
        css = '';
      }
      _results = [];
      for (_i = 0, _len = sockets.length; _i < _len; _i++) {
        socket = sockets[_i];
        _results.push(socket.emit('refreshCss', errText, css));
      }
      return _results;
    });
  });
  files.watch(root, 'html', function() {
    return files.templates(root, clientName, function(err, templates, instances) {
      var errText, socket, _i, _len, _results;
      if (err) {
        errText = templateError(err);
        templates = {};
        instances = {};
      }
      view.clear();
      view._makeAll(templates, instances);
      _results = [];
      for (_i = 0, _len = sockets.length; _i < _len; _i++) {
        socket = sockets[_i];
        _results.push(socket.emit('refreshHtml', errText, templates, instances));
      }
      return _results;
    });
  });
  return files.watch(root, 'js', function() {
    return process.send({
      type: 'reload'
    });
  });
};
